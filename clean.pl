#!/usr/bin/perl -w

no if $] >= 5.018, warnings => 'experimental';
use strict;
no strict 'refs';
use English;
use utf8;
no warnings 'misc';

use Data::Dumper;
use Getopt::Long;
use constant { true => 1, false => 0 };
sub max($$) { $_[$_[0] < $_[1]] }
sub min($$) { $_[$_[0] > $_[1]] }

our ($variant, $debug, $raw);
$variant = 1;
$debug = 0;
$raw = 0;

our $LRE = "\x{202A}"; our $LRM = "\x{200E}";
our $RLE = "\x{202B}"; our $RLM = "\x{200F}";
our $PDF = "\x{202C}";

my %lut;
my ($t1, $t2);

GetOptions(
	"type=i" => \$variant, 
	"debug" => \$debug,
	"verbose" => \$debug,
	"raw" => \$raw,
#	"help|?" => \&HelpMessage,
) or die("Error in command line arguments\n");

if ($#ARGV>=0) {
	my $fin = $ARGV[0];
	my $fout = $fin;
	$fout =~ s/(.*)\.[^.]*/$1-2.txt/;
	$fout = $ARGV[1] if ($#ARGV>=1);
	open(my $FIN,"<:utf8",$fin) || die "Cannot open file \"$fin\"!\n";
	open(STDOUT, ">$fout") || die "Cannot open file \"$fout\"!\n";
	binmode STDOUT, ":utf8";
	binmode STDERR, ":utf8";
	local $/;
	$_ = <$FIN>;
} else {
	binmode STDIN, ":utf8";
	binmode STDOUT, ":utf8";
	binmode STDERR, ":utf8";
	$_ = join('', <STDIN>);
}

##### Various Encodings #####

if (/\x{F8FF}/ and /\xD3/) { # Fix f*cked-up macos encoding
	# Convert Unicode to "Mac OS Roman", treat as "Mac OS Hebrew" and convert back to Unicode.
	# See ftp://ftp.unicode.org/Public/MAPPINGS/VENDORS/APPLE/ROMAN.TXT
	# and ftp://ftp.unicode.org/Public/MAPPINGS/VENDORS/APPLE/HEBREW.TXT
	tr/\xC4\xC5\xC7\xC9\xD1\xD6\xDC\xE1\xE0\xE2\xE4\xE3\xE5\xE7\xE9\xE8\xEA\xEB\xED\xEC\xEE\xEF\xF1\xF3\xF2\xF4\xF6\xF5\xFA\xF9\xFB\xFC\x{2020}\xB0\xA2\xA3\xA7\x{2022}\xB6\xDF\xAE\xA9\x{2122}\xB4\xA8\x{2260}\xC6\xD8\x{221E}\xB1\x{2264}\x{2265}\xA5\xB5\x{2202}\x{2211}\x{220F}\x{03C0}\x{222B}\xAA\xBA\x{03A9}\xE6\xF8\xBF\xA1\xAC\x{221A}\x{0192}\x{2248}\x{2206}\xAB\xBB\x{2026}\xA0\xC0\xC3\xD5\x{0152}\x{0153}\x{2013}\x{2014}\x{201C}\x{201D}\x{2018}\x{2019}\xF7\x{25CA}\xFF\x{0178}\x{2044}\x{20AC}\x{2039}\x{203A}\x{FB01}\x{FB02}\x{2021}\xB7\x{201A}\x{201E}\x{2030}\xC2\xCA\xC1\xCB\xC8\xCD\xCE\xCF\xCC\xD3\xD4\x{F8FF}\xD2\xDA\xDB\xD9\x{0131}\x{02C6}\x{02DC}\xAF\x{02D8}\x{02D9}\x{02DA}\xB8\x{02DD}\x{02DB}\x{02C7}/\x80-\xFF/;
	
	# Place RTL tags
	s/([\xA0-\xFF])/$RLE$1$PDF/g;
	tr/\x80-\xFF/\xC4\x{FB1F}\xC7\xC9\xD1\xD6\xDC\xE1\xE0\xE2\xE4\xE3\xE5\xE7\xE9\xE8\xEA\xEB\xED\xEC\xEE\xEF\xF1\xF3\xF2\xF4\xF6\xF5\xFA\xF9\xFB\xFC\x20-\x25\x{20AA}\x27\x29\x28\x2A-\x3F\x{F86A}\x{201E}\x{F89B}-\x{F89E}\x{05BC}\x{FB4B}\x{FB35}\x{2026}\xA0\x{05B8}\x{05B7}\x{05B5}\x{05B6}\x{05B4}\x{2013}\x{2014}\x{201C}\x{201D}\x{2018}\x{2019}\x{FB2A}\x{FB2B}\x{05BF}\x{05B0}\x{05B2}\x{05B1}\x{05BB}\x{05B9}\x{05B8}\x{05B3}\x{05D0}-\x{05EA}\x7D\x5D\x7B\x5B\x7C/;
	
	# Pack numeric and nikkud sequences
	s/ (?=$RLE[\x{05B0}-\x{05BD}]$PDF)//g;
	s/(?<=$RLE[\x{05B0}-\x{05BD}]$PDF) //g;
	s/([◊ê-◊™][\x{05B0}-\x{05BD}]*)$PDF$RLE([\x{05B0}-\x{05BD}])/$1$2/g;
	s/($RLE[0-9]$PDF(?:$RLE[0-9.,%]$PDF)+)/$LRE$1$PDF/g;
	s/\x{F86A}/\x{05DC}\x{05B9}/g; # HEBREW LETTER LAMED + HEBREW POINT HOLAM
	tr/\x{F89B}-\x{F89E}//d; # Remove obsolete "canorals"
} elsif (/\x{F8FF}/) {
	tr/\x{F8FF}/◊†/;
}

if (/[\xE0-\xFA]{5,}/) { # Convert Windows-1255 codepage
	# Convert Windows-1255 to Unicode
	tr/\xE0-\xFA/◊ê-◊™/;
	tr/\xC0-\xCF/\x{05B0}-\x{05BF}/;
}

if ((/[A-Z]/) and (/\[/) and !(/[◊ê-◊™]/)) {
	tr/B-V/◊ê-◊™/;
	tr/WXY\[Z\\/◊•◊¶◊ß◊©◊®◊™/;
	tr/=/‚Äì/;
	tr/e/Ô¨µ/;
	s/([◊ê-◊™])\n?\]/÷¥$1/;
	s/([◊ê-◊™Ô¨µ\x{05B0}-\x{05BD}])/$RLE$1$PDF/g;
}

##### Bidi corrections #####

s/([\x{05B0}-\x{05BD}]+)([◊ê-◊™])/$2$1/g if (/$RLE\x{05BC}[◊ê-◊™]/);

# Try to fix RLE/PDF (dumb BIDI encoding in PDFs)
if (/[$LRE$RLE$PDF]/) {
	# Place lines with [RLE][PDF] inside [LRE][PDF] context
	# and recursively pop embedded bidi formating
	s/(?<=$RLM$PDF)\n/ /g;
	# Try to analyze context:
	my $t1 = () = (/^(?P<rec>[$LRE$RLE](?&rec)*[$PDF]|[^$LRE$RLE$PDF\n]++)$/gm);
	my $t2 = () = (/^(?P<rec>[$LRE$RLE](?&rec)*[$PDF]|[^$LRE$RLE$PDF\n]++){2,}$/gm);
	print STDERR "Got $t1/$t2 single/multiple embedded blocks.\n" if ($debug);
	if ($t1<=$t2*10) {
		s/^(.+)$/$LRE$1$PDF/gm;
	} else {
		s/(?P<rec>[$LRE$RLE](?:[^$LRE$RLE$PDF\n]*|(?&rec))*[$PDF])\n*/$1\n/gm;
	}
	# s/^(.*?$RLE.*?$PDF.*)$/$LRE$1$PDF/gm;
	s/([$LRE$RLE](?:[^$LRE$RLE$PDF]*|(?0))*$PDF)/&pop_embedded($1)/ge;
	# Use internal seperators for very long words
	# s/([◊ê-◊™\-.,;:'"‚êÄ]{10,})/ $1 =~ tr|‚êÄ| |r /ge;
	s/([^ ‚êÄ\n]{2,}‚êÄ[^ \n]{5,}[◊ê-◊™]{2,})/ $1 =~ s\‚êÄ|(?<=[◊ê-◊™])(?=[^‚êÄ ◊ê-◊™])|(?<=[^‚êÄ ◊ê-◊™])(?=[◊ê-◊™])\ \gr /ge;
	tr/‚êÄ//d;
}

# Throw away remaining BIDI characters
tr/\x{200E}\x{200F}\x{202A}-\x{202E}\x{2066}-\x{2069}//d;
# Join seperated lines with ‚ê° marker
while (s/^(.*)\n‚ê°\n(\(\S+\)|\d\S*\.|\d+)$/$2 $1/gm) {}
s/\n‚ê°\n/ /g;

##### Characters-level corrections #####

# Keep ndash between hebrew words if not all words are seperated with ndash
# s/(?<=[◊ê-◊™])‚Äì(?=[◊ê-◊™])/&ndash;/g if /[◊ê-◊™][\÷æ\-][◊ê-◊™]/;

# General cleanup
s/ ?\t\n/\n‚ê°\n/g;             # This LF will be later removed
s/(\n\r|\r\n|\r)/\n/g;        # Remove CR
tr/\x07\x08\x7F//d;           # Remove BELL, BS and DEL
tr/\x11/\t/;                  # VT is Tab
tr/\xA0\x{2000}-\x{200A}\x{202F}\x{205F}\x{2060}/ /; # Typographic spaces
tr/\x{200B}-\x{200D}//d;      # Zero-width spaces and ZWJ
tr/÷æ‚Äì‚Äî‚Äí‚Äï/-/;                  # Convert typographic dashes
tr/‚Äë/‚Äì/;
# s/(?<![◊ê-◊™\x{05B0}-\x{05BD}])\x{05BF}/-/g; # Rafe (U+05BF) misused as dash
s/\x{05BF} ?/-/g;             # Rafe (U+05BF) misused as dash
tr/\xAD\x96\x97/-/;           # Convert more typographic dashes
tr/◊¥‚Äù‚Äú‚Äû‚Äü‚Ä≥‚Ä∂/"/;                # Convert typographic double quotes
tr/`◊≥‚Äô‚Äò‚Äö‚Äõ‚Ä≤‚Äµ/'/;               # Convert typographic single quotes
tr/Õæ/;/;                      # Convert wrong OCRed semicolon
s/(\x{FFFD}{2,})/' ' . ',' x length($1) . ' '/ge; # dots
s/,( ¬∏){2,}|,{3,}/ /g;        # dots seperator
tr/¬∏/,/;                      # Convert Cedilla used for comma
tr/\x{F0A8}\x{F063}/‚ñ°/;       # White square (special font)
tr/¬∫/¬∞/;                      # ordinal indicatior meant to be degree sign
s/‚Ä¶/.../g;
s/()(?:(\n)|)[\x{FEFF}\x{FFFC}-\x{FFFF}](?:(\n)|)/$+/g;    # Unicode placeholders and junk
tr/\x{F000}-\x{F031}\x{F07F}/‚ñ°/;      # Replacement font codes, cannot recover without OCR.

# Hebrew ligatures and alternative forms
tr/Ô¨†Ô¨°Ô¨¢Ô¨£Ô¨§Ô¨•Ô¨¶Ô¨ßÔ¨®/◊¢◊ê◊ì◊î◊õ◊ú◊ù◊®◊™/;
# Keep hebrew plus sign - tr/Ô¨©/+/;
# Keep math symbols     - tr/‚Ñµ‚Ñ∂‚Ñ∑‚Ñ∏/◊ê◊ë◊í◊ì/;
$_ = s_lut($_, {
	'Ô¨∞' => '◊ê÷º', 'Ô¨±' => '◊ë÷º', 'Ô¨≤' => '◊í÷º', 'Ô¨≥' => '◊ì÷º', 'Ô¨¥' => '◊î÷º', 'Ô¨µ' => '◊ï÷º', 'Ô¨∂' => '◊ñ÷º', 'Ô¨∑' => '◊ó÷º', 'Ô¨∏' => '◊ò÷º', 
	'Ô¨π' => '◊ô÷º', 'Ô¨∫' => '◊ö÷º', 'Ô¨ª' => '◊õ÷º', 'Ô¨º' => '◊ú÷º', 'Ô¨Ω' => '◊ù÷º', 'Ô¨æ' => '◊û÷º', 'Ô¨ø' => '◊ü÷º', 'Ô≠Ä' => '◊†÷º', 'Ô≠Å' => '◊°÷º', 
	'Ô≠Ç' => '◊¢÷º', 'Ô≠É' => '◊£÷º', 'Ô≠Ñ' => '◊§÷º', 'Ô≠Ö' => '◊•÷º', 'Ô≠Ü' => '◊¶÷º', 'Ô≠á' => '◊ß÷º', 'Ô≠à' => '◊®÷º', 'Ô≠â' => '◊©÷º', 'Ô≠ä' => '◊™÷º', 
	'Ô¨™' => '◊©◊Å', 'Ô¨´' => '◊©◊Ç', 'Ô¨¨' => '◊©÷º◊Å', 'Ô¨≠' => '◊©÷º◊Ç', 'Ô¨Æ' => '◊ê÷∑', 'Ô¨Ø' => '◊ê÷∏', 'Ô¨ù' => '◊ô÷¥', 'Ô¨ü' => '◊≤÷∑', 'Ô≠è' => '◊ê◊ú', 'Ô°™' => '◊ú÷π',
	'Ô≠ã' => '◊ï÷π', 'Ô≠å' => '◊ë÷ø', 'Ô≠ç' => '◊õ÷ø', 'Ô≠é' => '◊§÷ø',
});

# Latin ligatures
$_ = s_lut($_, {
	'Ô¨Ä' => 'ff', 'Ô¨Å' => 'fi', 'Ô¨Ç' => 'fl', 'Ô¨É' => 'ffi', 'Ô¨Ñ' => 'ffl', 'Ô¨Ö' => '≈øt', 'Ô¨Ü' => 'st', # 'üô∞' => 'et', 'üô±' => 'et',
	'«±' => 'DZ', '«≤' => 'Dz', '«≥' => 'dz', '«Ñ' => 'D≈Ω', '«Ö' => 'D≈æ', '«Ü' => 'd≈æ', 
	'ƒ≤' => 'IJ', 'ƒ≥' => 'ij', '«á' => 'LJ', '«à' => 'Lj', '«â' => 'lj', '«ä' => 'NJ', '«ã' => 'Nj', '«å' => 'nj', 
	'»∏' => 'db', '»π' => 'qp', 'Íù†' => 'VY', 'Íù°' => 'vy',
	# '≈í' => 'OE', '≈ì' => 'oe', '√Ü' => 'AE', '√¶' => 'ae', # Also «¢«£«º«Ω√ÜÃÄ√¶ÃÄ√ÜÃÇ√¶ÃÇ√ÜÃÉ√¶ÃÉ... Also Íú≤Íú≥Íú¥ÍúµÍú∂Íú∑Íú∏ÍúπÍúºÍúΩÍùéÍùè and ...
	# ' ©' => 'f≈ã', ' ™' => 'ls', ' ´' => 'lz', '…Æ' => 'l í', ' ®' => 't…ï', ' ¶' => 'ts', 'Í≠ß' => 't Ç', 'Í≠¶'=> 'd ê', ' ß' => 't É', 
	# '∆í' => '<i>f</i>', '∆ë' => '<i>F</i>',
});

# Strange typos in reshumot (PDF)
s/(?<=[0-9])(◊©◊Ç| ◊©◊Ç )(?=[0-9])/√ó/g;
s/(?<!◊©)[\x{05C1}\x{05C2}]+//g;

# Special encoding in rare cases
$t1 = () = (/^[45T]+$/mg);
$t2 = () = (/\n/mg);
if ($t1>$t2/100) {
	s/^\d? ?([TPF]\d?)+ ?\d?$//mg;
}

# Check if we got all parentheses wrong
$t1 = () = (/[^()\n]*\n?\)\n?[^()\n]+\n?\(/gm);
$t2 = () = (/[^()\n]\n?\(\n?[^()\n]+\n?\)/gm);
# print STDERR "got $t1 and $t2.\n";
if ($t1 > $t2) {
	tr/([{<>}])/)]}><{[(/;
}


# Clean HTML markups
s/\n/ /g if (/<html>/ and /<body/);
s/<style.*?<\/style>//gsi;
s/\s*\n\s*/ /g if /<\/p>/i;
s/<br\/?>/\n/gi;
s/<\/(div|td|p|tr|th).*?>/\n/gi; # Block elements
# s/<\/(p|tr|th).*?>/\n\n/gi; # Block elements
s/<\/?(?:".*?"|'.*?'|[^'">]*+)*>//g;
$_ = unescape_text($_);

if ($raw) { 
	s/[‚êÄ‚ê°]//g;
	print $_; exit 0; 
}

##### Complex corrections rules #####

$_ = fix_footnotes($_);

s/\f/‚êå\f\n‚êä\n/gm;
s/^ *\t+ *(.+)\n(\([^()]+\))$/$2 $1/gm;
s/^\.(\d[\d\-]*)$/$1./gm;
s/^(\d[0-9◊ê-◊™]*)\n+\.\n/$1\.\n/gm;
# s/\n([0-9]+|-)\n/ $1 /g;


# Join lines, but not all
# - Don't join lines ending with dot, colon etc.
# - Don't join short lines with colon which may be section title.
s/^ +/‚êä/gm;
s/^(\.\.\.|[,.:;])(?!\.{3,})/‚ê°$1/gm;
s/([\(\[])$/$1‚ê°/gm;
s/^(\(.+ .+\))$/‚êä$1‚êä/gm;
s/([.:;0-9])$/$1‚êä/gm;
s/^(_+)/‚êä$1/gm;
s/^(.*[:].*[◊ê-◊™].*?)‚êä?$/‚êä$1‚êä/gm;
s/^(")\n([^"\n]+)\n(")$/‚êä$1$2$3/gm;
s/^("[^"\n]+)\n(")$/$1$2/gm;
s/^([0-9][0-9◊ê-◊™]*\.)‚êä?/‚ê°‚ê° $1‚êä/gm;
s/^(-|[()0-9.,]+[;,]?|[◊ê-◊™ "]+)(?=‚êä?$)/‚ê° $1 ‚ê°/gm;
s/([◊ê-◊™][0-9,\- ']*\n)((- )?[◊ê-◊™]|[0-9][◊ê-◊™0-9, \-\[\]'"()]*‚êä?$)/$1‚ê° $2/gm;

s/ ‚ê°\n‚êä?‚ê°(?! )|(?<![ ‚ê°])\n‚ê°//g;
s/( ‚ê°\n‚ê° | ‚ê°\n|\n‚ê° )/ /g;
s/ *(‚êä *\n?)+/‚êä\n/gm;
s/^([^\n‚êä]+[^.:;\n‚êä])(?:‚êä\n|)‚ê° *([^\n‚êä]*)(‚êä?)$/$2 $1$3/gm;   # ‚ê°‚ê° is a special mark when concatenating article numerals
s/‚ê°//g;

# # Don't join short lines without puncuation marks
# s/^([◊ê-◊™]+ [◊ê-◊™0-9 ]{1,20})$/‚êä$1‚êä/gm;

# s/(?<=[◊ê-◊™'])\n((- )?['"]?[◊ê-◊™]|[0-9][◊ê-◊™0-9, \-\[\]'"()]*‚êä?$)/ $1/gm;
# s/(?<=[◊ê-◊™'"])\n((- )?[◊ê-◊™'"][◊ê-◊™0-9, \-\[\]'"()]*[:;.]?‚êä?|[0-9][◊ê-◊™0-9, \-\[\]'"()]*‚êä?)$/ $1/gm;
# s/(?<=[◊ê-◊™0-9'"])\n([◊ê-◊™'"][◊ê-◊™0-9, \-\[\]'"()]*[;.]?|[0-9][◊ê-◊™0-9, \-\[\]'"()]*)$/ $1/gm;
s/[‚êä‚êå]//g;  # But keep \f.


# Replace vulgar fractions
s/([¬Ω‚Öì‚Öî¬º¬æ‚Öï‚Öñ‚Öó‚Öò‚Öô‚Öö‚Öê‚Öõ‚Öú‚Öù‚Öû‚Öë‚Öí‚Üâ])(\d+)/$2$1/g;
$_ = s_lut($_, { 
	'¬Ω' => '¬π‚ÅÑ‚ÇÇ', '‚Öì' => '¬π‚ÅÑ‚ÇÉ', '‚Öî' => '¬≤‚ÅÑ‚ÇÉ', '¬º' => '¬π‚ÅÑ‚ÇÑ', '¬æ' => '¬≥‚ÅÑ‚ÇÑ', 
	'‚Öï' => '¬π‚ÅÑ‚ÇÖ', '‚Öñ' => '¬≤‚ÅÑ‚ÇÖ', '‚Öó' => '¬≥‚ÅÑ‚ÇÖ', '‚Öò' => '‚Å¥‚ÅÑ‚ÇÖ', '‚Öô' => '¬π‚ÅÑ‚ÇÜ', '‚Öö' => '‚Åµ‚ÅÑ‚ÇÜ',  
	'‚Öê' => '¬π‚ÅÑ‚Çá', '‚Öõ' => '¬π‚ÅÑ‚Çà', '‚Öú' => '¬≥‚ÅÑ‚Çà', '‚Öù' => '‚Åµ‚ÅÑ‚Çà', '‚Öû' => '‚Å∑‚ÅÑ‚Çà', 
	'‚Öë' => '¬π‚ÅÑ‚Çâ', '‚Öí' => '¬π‚ÅÑ‚ÇÅ‚ÇÄ', '‚Üâ' => '‚Å∞‚ÅÑ‚ÇÉ'
});

# Replcace Mathematical Alphanumeric Symbols (and create <b/i/tt> tags if nessesary)
$_ = fix_symbols($_) if (/[\x{1D400}-\x{1D7FF}]/);

# Escape control characters if found in the PDF stream...
tr/\x00-\x08\x0b\x0d-\x1F\x7F/‚êÄ-‚êâ‚êã‚êç-‚êü‚ê°/;

# [Don't] Clean WIKI markups
# s/'''//g;
# s/^ *=+ *(.*?) *=+ *$/$1/gm;
# s/^[:;]+-? *//gm;

tr/\t\xA0/ /;      # Tab and hardspace are whitespaces
s/^ +//mg;         # Remove redundant whitespaces
s/ +$//mg;         # Remove redundant whitespaces
s/ {2,}/ /g;       # Pack  long spaces
s/\n{2,}/\n/g;     # Chop two+ linefeeds
s/\f\n*/\f\n\n/g;  # Keep FF as two linefeeds
s/\n{3,}/\n\n/g;   # 
s/^\n+//s;         # Remove first and last linefeeds
s/\n*$/\n/s;

# Special corrections
s/(?<=\S) (\.\.\.|[,.:;])(?!\.{3,})/$1/g;  # Remove redundant whitespaces
s/(?<!')''(?!')/"/g;
s/("[◊ê-◊™])(\d{4})[-]/$1-$2/g;
s/^[.](\d.*?) +/$1. /gm;
s/^(\d.*?)\n\.\n/$1. /gm;
s/([◊ê-◊™0-9A-z:][([\-]) /$1/gm;
s/(?<=[◊ê-◊™]\b)( -| -)(?=[0-9])/-/g;
s/(?<=[\(\[]) //g;
s/ (?=[\)\]])//g;
s/"- |" -(?=[◊ê-◊™])|"-(?=[◊ê-◊™])/" - /g;
s/ (?=" -)//g;
s/(^| )" /"/gm;
s/ (?="[.,:;])//g;
s/ (?='[ .,:;])//g;
s/^([:]++-?)(?=\S)/$1 /gm;
s/(?<=[◊ê-◊™]-)(\d{1,2})((19|20)\d\d)(?!\d)/$2 $1/gm;

s/([‚Å∞¬π¬≤¬≥‚Å¥-‚Åπ]+\‚ÅÑ[‚ÇÄ-‚Çâ]+)(\d+)/$2$1/g;
s/%(\d*[‚Å∞¬π¬≤¬≥‚Å¥-‚Åπ]+\‚ÅÑ[‚ÇÄ-‚Çâ]+|\d+\/\d+|\d+(\.\d+)?)/$1%/g;
s/([◊ê-◊™])(\d+(?:\.\d+)?)-([◊ê-◊™])/$1-$2 $3/g;
s/\b(\d+(?:\.\d+)?)[Xx](\d+(?:\.\d+)?)\b/$2√ó$1/g;

s/^◊ú◊™◊ó◊ô◊ú◊™ ◊î◊¢◊û◊ï◊ì$//gm;

print $_; 
exit;
1;

sub s_lut {
	my $str = shift;
	my $table = shift;
	my $keys = join('', keys(%{$table}));
#	print STDERR "Keys are |$keys|\n";
	$str =~ s/([$keys])/$table->{$1}/ge;
	return $str;
}


sub unescape_text {
	local $_ = shift;
	my %table = ( 'quot' => '"', 'lt' => '<', 'gt' => '>', 'ndash' => '‚Äì', 'nbsp' => ' ', 'apos' => "'", 
		'lrm' => "\x{200E}", 'rlm' => "\x{200F}", 'shy' => '&null;',
		'deg' => '¬∞', 'plusmn' => '¬±', 'times' => '√ó', 'sup1' => '¬π', 'sup2' => '¬≤', 'sup3' => '¬≥', 'frac14' => '¬º', 'frac12' => '¬Ω', 'frac34' => '¬æ', 'alpha' => 'Œ±', 'beta' => 'Œ≤', 'gamma' => 'Œ≥', 'delta' => 'Œ¥', 'epsilon' => 'Œµ',
	);
	s/&#(\d+);/chr($1)/ge;
	s/(&([a-z]+);)/($table{$2} || $1)/ge;
	s/&null;//g;
	s/&amp;/&/g;
	return $_;
}


sub pop_embedded {
	local $_ = shift; my $type = shift // '';
	
	# 0x202A is [LRE]; 0x202B is [RLE]; 0x202C is [PDF].
	if (/^([$LRE$RLE])(.*)[$PDF]$/) {
		$type .= $1; $_ = $2;
		s/(?<=[$PDF])(?=[$LRE$RLE])/‚êÄ/g;
		# dump_stderr("pop_embedded: got |$_|\n");
		my @arr = (m/([^$LRE$RLE$PDF]+|[$LRE$RLE](?0)*[$PDF])/g);
		if ($type eq "$LRE" && scalar(@arr)>1) {
			# dump_stderr("pop_embedded: |" . join('|',@arr) . "|\n") if ($#arr>0);
			# s/^([^$LRE$RLE$PDF]+)$/$LRE$1$PDF/ for @arr;
		}
		# dump_stderr("pop_embedded: ($type) |" . join('|',@arr) . "|\n") if ($#arr>0);
		@arr = map { pop_embedded($_,$type) } @arr;
		@arr = reverse(@arr) if ($type eq "$LRE");  # [LRE]$_[PDF]
		# dump_stderr("pop_embedded: ret |" . join('|',@arr) . "|\n") if ($#arr>0);
		return join('',@arr);
	} 
	if ($type =~ /$RLE/) {        # within RLE block
	# if (substr($type,-1) eq "$RLE") {
		tr/([{<>}])/)]}><{[(/ if ($variant==0 || $variant==2);
	}
	if (substr($type,-1) eq "$LRE") { # LRE block
		my $soft = '(?:[ \t.\,:;?!#$%^&*"\'\\-‚Äì\(\)\[\]{|}<>◊ê-◊™]|\d[\d.,\\/\\-:]*\d[%$]?|\d)';
		my ($pre,$mid,$post) = (m/^($soft*+)(.*?)($soft*)$/);
		$pre = join('',reverse(split /($soft)/, $pre));
		$post = join('',reverse(split /($soft)/, $post));
		$_ = $pre . $mid . $post;
		$_ = $post . $mid . $pre;
		tr/([{<>}])/)]}><{[(/ if ($variant==3 || $variant==2);
		# s/^($soft*)(.*?)($soft*)$/reverse($3).$2.reverse($1)/e;
	}
	return $_;
}


# fix_symbols: Replcace Mathematical Alphanumeric Symbols (and create <b/i/tt> tags if nessesary)
sub fix_symbols {
	local $_ = shift;
	# Make symbols linear in unicode space
	tr/‚Ñ¨‚Ñ∞‚Ñ±‚Ñã‚Ñê‚Ñí‚Ñ≥‚Ñõ‚ÑØ‚Ñä‚Ñ¥/ùíùùí†ùí°ùí£ùí§ùíßùí®ùí≠ùí∫ùíºùìÑ/;
	tr/‚Ñ≠‚Ñå‚Ñë‚Ñú‚Ñ®/ùîÜùîãùîãùîïùîù/;
	tr/‚ÑÇ‚Ñç‚Ñï‚Ñô‚Ñö‚Ñù‚Ñ§/ùî∫ùîøùïÖùïáùïàùïâùïë/;
	tr/‚Ñé/ùëï/;
	
	# Normal letters			# tr/ùñ†-ùñπùñ∫-ùóìùü¢-ùü´ùîÑ-ùîùùîû-ùî∑/A-Za-z0-9A-Za-z/;
	tr/ùñ†-ùóìùü¢-ùü´/A-Za-z0-9/;
	tr/ùîÑ-ùî∑/A-Za-z/;
	# Bold letters				# tr/ùêÄ-ùêôùêö-ùê≥ùüé-ùüóùóî-ùó≠ùóÆ-ùòáùü¨-ùüµùï¨-ùñÖùñÜ-ùñü/A-Za-z0-9A-Za-z0-9A-Za-z/;
	s|([ùêÄ-ùê≥ùüé-ùüó]+)|sprintf("<b>%s</b>", $1 =~ tr/ùêÄ-ùê≥ùüé-ùüó/A-Za-z0-9/r)|ge;
	s|([ùóî-ùòáùü¨-ùüµ]+)|sprintf("<b>%s</b>", $1 =~ tr/ùóî-ùòáùü¨-ùüµ/A-Za-z0-9/r)|ge;
	s|([ùï¨-ùñü]+)|sprintf("<b>%s</b>", $1 =~ tr/ùï¨-ùñü/A-Za-z/r)|ge;
	s|([ùö®-ùõÄùõÇ-ùõöùõÅùüäùõõùõúùõùùõûùõüùõ†ùõ°ùüã]+)|sprintf("<b>%s</b>", $1 =~ tr/ùö®-ùõÄùõÇ-ùõöùõÅùüäùõõùõúùõùùõûùõüùõ†ùõ°ùüã/Œë-Œ©Œ±-œâ‚àáœú‚àÇœµœëœ∞œïœ±œñœù/r)|ge;
	s|([ùùñ-ùùÆùù∞-ùûàùùØùûâùûäùûãùûåùûçùûéùûè]+)|sprintf("<b>%s</b>", $1 =~ tr/ùùñ-ùùÆùù∞-ùûàùùØùûâùûäùûãùûåùûçùûéùûè/Œë-Œ©Œ±-œâ‚àá‚àÇœµœëœ∞œïœ±œñ/r)|ge;
	# Italic letters			# tr/ùê¥-ùëçùëé-ùëßùòà-ùò°ùò¢-ùòªùíú-ùíµùí∂-ùìè/A-Za-zA-Za-zA-Za-z/;
	s|([ùê¥-ùëßùö§ùö•]+)|sprintf("<i>%s</i>", $1 =~ tr/ùê¥-ùëßùö§ùö•/A-Za-zƒ±»∑/r)|ge;
	s|([ùòà-ùòª]+)|sprintf("<i>%s</i>", $1 =~ tr/ùòà-ùòª/A-Za-z/r)|ge;
	s|([ùíú-ùìè]+)|sprintf("<i>%s</i>", $1 =~ tr/ùíú-ùìè/A-Za-z/r)|ge;
	s|([ùõ¢-ùõ∫ùõº-ùúîùõªùúïùúñùúóùúòùúôùúöùúõ]+)|sprintf("<b>%s</b>", $1 =~ tr/ùõ¢-ùõ∫ùõº-ùúîùõªùúïùúñùúóùúòùúôùúöùúõ/Œë-Œ©Œ±-œâ‚àá‚àÇœµœëœ∞œïœ±œñ/r)|ge;
	# Bold Italic				# tr/ùë®-ùíÅùíÇ-ùíõùòº-ùôïùôñ-ùôØùìê-ùì©ùì™-ùîÉ/A-Za-zA-Za-zA-Za-z/;
	s|([ùë®-ùíõ]+)|sprintf("<b><i>%s</i></b>", $1 =~ tr/ùë®-ùíõ/A-Za-z/r)|ge;
	s|([ùòº-ùôØ]+)|sprintf("<b><i>%s</i></b>", $1 =~ tr/ùòº-ùôØ/A-Za-z/r)|ge;
	s|([ùìê-ùîÉ]+)|sprintf("<b><i>%s</i></b>", $1 =~ tr/ùìê-ùîÉ/A-Za-z/r)|ge;
	s|([ùúú-ùú¥ùú∂-ùùéùúµùùèùùêùùëùùíùùìùùîùùï]+)|sprintf("<b><i>%s</i></b>", $1 =~ tr/ùúú-ùú¥ùú∂-ùùéùúµùùèùùêùùëùùíùùìùùîùùï/Œë-Œ©Œ±-œâ‚àá‚àÇœµœëœ∞œïœ±œñ/r)|ge;
	s|([ùûê-ùû®ùû™-ùüÇùû©ùüÉùüÑùüÖùüÜùüáùüàùüâ]+)|sprintf("<b><i>%s</i></b>", $1 =~ tr/ùûê-ùû®ùû™-ùüÇùû©ùüÉùüÑùüÖùüÜùüáùüàùüâ/Œë-Œ©Œ±-œâ‚àá‚àÇœµœëœ∞œïœ±œñ/r)|ge;
	# Monospace					# tr/ùô∞-ùöâùöä-ùö£ùü∂-ùüø/A-Za-z0-9/;
	s|([ùô∞-ùö£ùü∂-ùüø]+)|sprintf("<tt>%s</tt>", $1 =~ tr/ùô∞-ùö£ùü∂-ùüø/A-Za-z0-9/r)|ge;
	# Monospace Bold			# tr/ùî∏-ùïëùïí-ùï´ùüò-ùü°/A-Za-z0-9/;
	s|([ùî∏-ùï´ùüò-ùü°]+)|sprintf("<tt><b>%s</b></tt>", $1 =~ tr/ùî∏-ùï´ùüò-ùü°/A-Za-z0-9/r)|ge;
	
	tr/Œ¢/œ¥/;
	s/<\/(i|b|tt)><\/(i|b|tt)>([ \n]*)<\2><\1>/$3/gs;
	s/<\/(i|b|tt)>([ \n]*)<\1>/$2/g;
	return $_;
}


# fix_footnotes: Change order of lines in case of incorrect break due to numeric comment reference.
sub fix_footnotes {
	my $text = shift;
	# Check if comments fix is required.
	my ($t1, $t2);
	$t1 = () = ($text =~ /\d{4}[ ‚êä\n]+\d{1,2}\)?[;,.]/gm);
	$t2 = () = ($text =~ /^\d{1,2}\)?[;,.].*[‚êä\n]+.*\d{4}/gm);
	print STDERR "fix_footnotes, before: $t1 correct, $t2 incorrect\n" if ($debug);
	if ($t1>$t2) { return $text; }
	my ($cnt, $p_cnt1, $p_cnt2, $restart, $flex);
	$cnt = $p_cnt1 = $p_cnt2 = 1; $restart = true; $flex = 1;
	my @lines = split(/\n/, $text);
	for (my $i = 0; $i < scalar(@lines)-1; $i++) {
		local $_ = $lines[$i];
		if (/◊ë◊™◊ï◊ß◊£/ || $lines[$i+1] =~ /◊ë◊™◊ï◊ß◊£/) { $restart = true; }
		if (/\f/) {
			($p_cnt2, $p_cnt1) = ($p_cnt1, $cnt);
			$cnt = max($p_cnt1, $cnt);
			next;
		}
		/^([0-9]+)(?|(\)?[;,. ])(.*)|()())$/ || next;
		my ($n, $s, $t) = (scalar($1), $2, $3);
		next if (/^\d+\.? (◊°"◊ó|◊ß"◊™|◊ô"◊§)|^\d+[,.]\d+/);
		if ($n>9999 && $lines[$i+1] =~ /, ◊î?◊™◊©.?".-$/) {
			$n =~ /^(\d{4})(\d+)$/;
			$n = scalar($2);
			$flex = min($flex+1, 2);
		}
		elsif ($s =~ /^[. ]?$/ && $lines[$i+1] !~ /\d{4} *$/) {
			$flex = min($flex+1, 2);
			next;
		}
		next unless (($n>=$cnt && $n<=$cnt+$flex) || ($restart && $n < 2) || $n==$p_cnt2);
		print STDERR "fix_footnotes: replacing |${lines[$i]}| and |${lines[$i+1]}|\n" if ($debug);
		$cnt = $n; $restart = false; $flex = 1;
		($lines[$i], $lines[$i+1]) = ("$lines[$i+1]‚êä", "<!-- (footnote) --> $lines[$i]‚êä");
		$i++; $cnt++;
	}
	$text = join("\n", @lines);
	$t1 = () = ($text =~ /\d{4}[ ‚êä\n]+(<!--.*?--> *|)\d{1,2}\)?[;,.]/gm);
	$t2 = () = ($text =~ /^\d{1,2}\)?[;,.].*[‚êä\n]+.*\d{4}/gm);
	print STDERR "fix_footnotes, after: $t1 correct, $t2 incorrect\n" if ($debug);
	return $text;
}


sub dump_stderr {
	return if (!$debug);
	local $_ = shift;
	
	tr/\x00-\x1F\x7F/‚êÄ-‚êü‚ê°/;
	s/([‚êç‚êä]+)/\n/g;
	s/‚êâ/‚êâ\t/g;
	
	s/\x{200E}/[LRM]/g;
	s/\x{200F}/[RLM]/g;
	s/\x{202A}/[LRE]/g;
	s/\x{202B}/[RLE]/g;
	s/\x{202C}/[PDF]/g;
	s/\x{202D}/[LRO]/g;
	s/\x{202E}/[RLO]/g;
	s/\x{2066}/[LRI]/g;
	s/\x{2067}/[RLI]/g;
	s/\x{2068}/[FSI]/g;
	s/\x{2069}/[PDI]/g;
	s/\x{061C}/[ALM]/g;
	
	s/\x{200B}/[ZWSP]/g;
	s/\x{200C}/[ZWNJ]/g;
	s/\x{200D}/[ZWJ]/g;
	s/\x{2060}/[WJ]/g;
	print STDERR $_;
}
